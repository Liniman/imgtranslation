name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1
    
    - name: Install Python dependencies  
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --line-length=100 .
      continue-on-error: true
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --profile black --line-length=100 .
      continue-on-error: true
    
    - name: Run tests with pytest
      env:
        DEEPL_API_KEY: ${{ secrets.DEEPL_API_KEY }}
      run: |
        pytest tests/ -v --cov=core --cov-report=xml --cov-report=html
    
    - name: Test Streamlit app syntax
      run: |
        python -m py_compile direct_edit_app.py
        python -m py_compile apps/app_enhanced.py
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run security analysis with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Check for known vulnerabilities with safety
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports  
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create deployment package
      run: |
        mkdir -p dist
        cp -r core/ dist/
        cp direct_edit_app.py requirements.txt README.md dist/
        tar -czf dist/imgtranslation-$(date +%Y%m%d-%H%M%S).tar.gz -C dist .
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: dist/*.tar.gz
        retention-days: 30

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to Streamlit Cloud (Staging)
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        echo "Streamlit Cloud deployment would be triggered here"
        # Actual deployment would connect to Streamlit Cloud API

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to Streamlit Cloud (Production)
      run: |
        echo "ðŸš€ Deploying to production environment..."
        echo "Streamlit Cloud deployment would be triggered here"
        # Actual deployment would connect to Streamlit Cloud API